
stu2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b54  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d74  08004d74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  08004d88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004d88  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b1c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002495  00000000  00000000  00032b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00035030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca4  00000000  00000000  00036050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269f8  00000000  00000000  00036cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013361  00000000  00000000  0005d6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd208  00000000  00000000  00070a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044a8  00000000  00000000  0016dc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00172100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004d14 	.word	0x08004d14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004d14 	.word	0x08004d14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd27 	bl	8000f6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f8c6 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa76 	bl	8000a10 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f90e 	bl	8000744 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000528:	f000 f9cc 	bl	80008c4 <MX_TIM3_Init>
  MX_TIM5_Init();
 800052c:	f000 fa22 	bl	8000974 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000530:	f000 f952 	bl	80007d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000534:	213c      	movs	r1, #60	; 0x3c
 8000536:	484e      	ldr	r0, [pc, #312]	; (8000670 <main+0x15c>)
 8000538:	f002 fb70 	bl	8002c1c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 800053c:	484d      	ldr	r0, [pc, #308]	; (8000674 <main+0x160>)
 800053e:	f002 f8db 	bl	80026f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	484c      	ldr	r0, [pc, #304]	; (8000678 <main+0x164>)
 8000546:	f002 f9b1 	bl	80028ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800054a:	2104      	movs	r1, #4
 800054c:	484a      	ldr	r0, [pc, #296]	; (8000678 <main+0x164>)
 800054e:	f002 f9ad 	bl	80028ac <HAL_TIM_PWM_Start>

  PID.Kp = 0.1;
 8000552:	4b4a      	ldr	r3, [pc, #296]	; (800067c <main+0x168>)
 8000554:	4a4a      	ldr	r2, [pc, #296]	; (8000680 <main+0x16c>)
 8000556:	619a      	str	r2, [r3, #24]
  PID.Ki = 0;
 8000558:	4b48      	ldr	r3, [pc, #288]	; (800067c <main+0x168>)
 800055a:	f04f 0200 	mov.w	r2, #0
 800055e:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000560:	4b46      	ldr	r3, [pc, #280]	; (800067c <main+0x168>)
 8000562:	f04f 0200 	mov.w	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000568:	2100      	movs	r1, #0
 800056a:	4844      	ldr	r0, [pc, #272]	; (800067c <main+0x168>)
 800056c:	f004 fb70 	bl	8004c50 <arm_pid_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  arm_pid_init_f32(&PID, 0);
 8000570:	2100      	movs	r1, #0
 8000572:	4842      	ldr	r0, [pc, #264]	; (800067c <main+0x168>)
 8000574:	f004 fb6c 	bl	8004c50 <arm_pid_init_f32>

	  if(spd > maxSpd)
 8000578:	4b42      	ldr	r3, [pc, #264]	; (8000684 <main+0x170>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b42      	ldr	r3, [pc, #264]	; (8000688 <main+0x174>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	429a      	cmp	r2, r3
 8000582:	dd03      	ble.n	800058c <main+0x78>
	  {
		  maxSpd = spd;
 8000584:	4b3f      	ldr	r3, [pc, #252]	; (8000684 <main+0x170>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a3f      	ldr	r2, [pc, #252]	; (8000688 <main+0x174>)
 800058a:	6013      	str	r3, [r2, #0]
	  }

	  posMM = pos / 250 * 8 / 1;
 800058c:	4b3f      	ldr	r3, [pc, #252]	; (800068c <main+0x178>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a3f      	ldr	r2, [pc, #252]	; (8000690 <main+0x17c>)
 8000592:	fb82 1203 	smull	r1, r2, r2, r3
 8000596:	1112      	asrs	r2, r2, #4
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	4a3d      	ldr	r2, [pc, #244]	; (8000694 <main+0x180>)
 80005a0:	6013      	str	r3, [r2, #0]

	  set_pos = posi * 250 / 8 * 1;
 80005a2:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <main+0x184>)
 80005a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a8:	461a      	mov	r2, r3
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <main+0xa2>
 80005b4:	3307      	adds	r3, #7
 80005b6:	10db      	asrs	r3, r3, #3
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b38      	ldr	r3, [pc, #224]	; (800069c <main+0x188>)
 80005bc:	601a      	str	r2, [r3, #0]
	  if(Vfeedback > setSpd){
 80005be:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <main+0x18c>)
 80005c0:	ed93 7a00 	vldr	s14, [r3]
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <main+0x190>)
 80005c6:	edd3 7a00 	vldr	s15, [r3]
 80005ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d2:	dd03      	ble.n	80005dc <main+0xc8>
		  Vfeedback = setSpd;
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <main+0x190>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a31      	ldr	r2, [pc, #196]	; (80006a0 <main+0x18c>)
 80005da:	6013      	str	r3, [r2, #0]
	  }
	  if(Vfeedback < -setSpd){
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <main+0x190>)
 80005de:	edd3 7a00 	vldr	s15, [r3]
 80005e2:	eeb1 7a67 	vneg.f32	s14, s15
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x18c>)
 80005e8:	edd3 7a00 	vldr	s15, [r3]
 80005ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f4:	dd07      	ble.n	8000606 <main+0xf2>
	  	Vfeedback = -setSpd;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <main+0x190>)
 80005f8:	edd3 7a00 	vldr	s15, [r3]
 80005fc:	eef1 7a67 	vneg.f32	s15, s15
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <main+0x18c>)
 8000602:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if(Vfeedback > 0)
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <main+0x18c>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000614:	dd14      	ble.n	8000640 <main+0x12c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2110      	movs	r1, #16
 800061a:	4823      	ldr	r0, [pc, #140]	; (80006a8 <main+0x194>)
 800061c:	f000 ffa8 	bl	8001570 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	4820      	ldr	r0, [pc, #128]	; (80006a8 <main+0x194>)
 8000626:	f000 ffa3 	bl	8001570 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, Vfeedback);
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <main+0x18c>)
 800062c:	edd3 7a00 	vldr	s15, [r3]
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <main+0x164>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000638:	ee17 2a90 	vmov	r2, s15
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	e797      	b.n	8000570 <main+0x5c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4818      	ldr	r0, [pc, #96]	; (80006a8 <main+0x194>)
 8000646:	f000 ff93 	bl	8001570 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2120      	movs	r1, #32
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <main+0x194>)
 8000650:	f000 ff8e 	bl	8001570 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -Vfeedback);
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <main+0x18c>)
 8000656:	edd3 7a00 	vldr	s15, [r3]
 800065a:	eef1 7a67 	vneg.f32	s15, s15
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x164>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000666:	ee17 2a90 	vmov	r2, s15
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
	  arm_pid_init_f32(&PID, 0);
 800066c:	e780      	b.n	8000570 <main+0x5c>
 800066e:	bf00      	nop
 8000670:	20000108 	.word	0x20000108
 8000674:	20000154 	.word	0x20000154
 8000678:	200000bc 	.word	0x200000bc
 800067c:	200001a0 	.word	0x200001a0
 8000680:	3dcccccd 	.word	0x3dcccccd
 8000684:	200001cc 	.word	0x200001cc
 8000688:	200001e0 	.word	0x200001e0
 800068c:	200001c8 	.word	0x200001c8
 8000690:	10624dd3 	.word	0x10624dd3
 8000694:	200001e4 	.word	0x200001e4
 8000698:	200001d8 	.word	0x200001d8
 800069c:	200001d0 	.word	0x200001d0
 80006a0:	200001d4 	.word	0x200001d4
 80006a4:	200001dc 	.word	0x200001dc
 80006a8:	48000400 	.word	0x48000400

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2238      	movs	r2, #56	; 0x38
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 fafe 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 ff8a 	bl	80015e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ee:	2355      	movs	r3, #85	; 0x55
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f824 	bl	8001750 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800070e:	f000 fa85 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2104      	movs	r1, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fb22 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000736:	f000 fa71 	bl	8000c1c <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800074c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	f003 fbf4 	bl	8003f74 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 fa43 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	f004 f98f 	bl	8004abc <HAL_UARTEx_SetTxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007a4:	f000 fa3a 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f004 f9c4 	bl	8004b38 <HAL_UARTEx_SetRxFifoThreshold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007b6:	f000 fa31 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	f004 f945 	bl	8004a4a <HAL_UARTEx_DisableFifoMode>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007c6:	f000 fa29 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028
 80007d4:	40008000 	.word	0x40008000

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	; 0x38
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_TIM2_Init+0xe8>)
 800080c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000810:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17-1;
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_TIM2_Init+0xe8>)
 8000814:	2210      	movs	r2, #16
 8000816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_TIM2_Init+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_TIM2_Init+0xe8>)
 8000820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_TIM2_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_TIM2_Init+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000832:	4823      	ldr	r0, [pc, #140]	; (80008c0 <MX_TIM2_Init+0xe8>)
 8000834:	f001 ff08 	bl	8002648 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f9ed 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084c:	4619      	mov	r1, r3
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <MX_TIM2_Init+0xe8>)
 8000850:	f002 fcd6 	bl	8003200 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800085a:	f000 f9df 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800085e:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_TIM2_Init+0xe8>)
 8000860:	f001 ffc2 	bl	80027e8 <HAL_TIM_PWM_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800086a:	f000 f9d7 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4810      	ldr	r0, [pc, #64]	; (80008c0 <MX_TIM2_Init+0xe8>)
 800087e:	f003 fa9d 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000888:	f000 f9c8 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088c:	2360      	movs	r3, #96	; 0x60
 800088e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM2_Init+0xe8>)
 80008a4:	f002 fb98 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008ae:	f000 f9b5 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM2_Init+0xe8>)
 80008b4:	f000 faae 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 80008b8:	bf00      	nop
 80008ba:	3738      	adds	r7, #56	; 0x38
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000bc 	.word	0x200000bc

080008c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2224      	movs	r2, #36	; 0x24
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 f9f2 	bl	8004cbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_TIM3_Init+0xa4>)
 80008e4:	4a21      	ldr	r2, [pc, #132]	; (800096c <MX_TIM3_Init+0xa8>)
 80008e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_TIM3_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_TIM3_Init+0xa4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_TIM3_Init+0xa4>)
 80008f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_TIM3_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_TIM3_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_TIM3_Init+0xac>)
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000920:	2301      	movs	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_TIM3_Init+0xa4>)
 8000934:	f002 f8cc 	bl	8002ad0 <HAL_TIM_Encoder_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800093e:	f000 f96d 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_TIM3_Init+0xa4>)
 8000950:	f003 fa34 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800095a:	f000 f95f 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000108 	.word	0x20000108
 800096c:	40000400 	.word	0x40000400
 8000970:	00010006 	.word	0x00010006

08000974 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_TIM5_Init+0x94>)
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <MX_TIM5_Init+0x98>)
 8000996:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_TIM5_Init+0x94>)
 800099a:	22a9      	movs	r2, #169	; 0xa9
 800099c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM5_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_TIM5_Init+0x94>)
 80009a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_TIM5_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_TIM5_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <MX_TIM5_Init+0x94>)
 80009ba:	f001 fe45 	bl	8002648 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80009c4:	f000 f92a 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_TIM5_Init+0x94>)
 80009d6:	f002 fc13 	bl	8003200 <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80009e0:	f000 f91c 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_TIM5_Init+0x94>)
 80009f2:	f003 f9e3 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 f90e 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000154 	.word	0x20000154
 8000a0c:	40000c00 	.word	0x40000c00

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a44:	f043 0320 	orr.w	r3, r3, #32
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_GPIO_Init+0xfc>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2120      	movs	r1, #32
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fd6f 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2130      	movs	r1, #48	; 0x30
 8000a96:	481e      	ldr	r0, [pc, #120]	; (8000b10 <MX_GPIO_Init+0x100>)
 8000a98:	f000 fd6a 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_GPIO_Init+0x104>)
 8000ab4:	f000 fbda 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fbcb 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ad6:	2330      	movs	r3, #48	; 0x30
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_GPIO_Init+0x100>)
 8000aee:	f000 fbbd 	bl	800126c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2028      	movs	r0, #40	; 0x28
 8000af8:	f000 fb83 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afc:	2028      	movs	r0, #40	; 0x28
 8000afe:	f000 fb9a 	bl	8001236 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800

08000b18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if (htim == &htim5 )
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d15f      	bne.n	8000be8 <HAL_TIM_PeriodElapsedCallback+0xd0>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b32:	801a      	strh	r2, [r3, #0]
	  spd =  QEIReadRaw * 1000 / 250 * 8;
 8000b34:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	015b      	lsls	r3, r3, #5
 8000b3c:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000b3e:	6013      	str	r3, [r2, #0]
	  pos += QEIReadRaw;
 8000b40:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a2d      	ldr	r2, [pc, #180]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b50:	6013      	str	r3, [r2, #0]
	  QEIReadOld = QEIReadRaw;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000b54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000b5a:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24


	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos) * 1000);
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	ed93 7a00 	vldr	s14, [r3]
 8000b84:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b88:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bbe:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bda:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000c14 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8000bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000be4:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8000be8:	bf00      	nop
 8000bea:	371c      	adds	r7, #28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20000154 	.word	0x20000154
 8000bf8:	20000108 	.word	0x20000108
 8000bfc:	200001c4 	.word	0x200001c4
 8000c00:	200001cc 	.word	0x200001cc
 8000c04:	200001c8 	.word	0x200001c8
 8000c08:	200001c6 	.word	0x200001c6
 8000c0c:	200001d0 	.word	0x200001d0
 8000c10:	200001a0 	.word	0x200001a0
 8000c14:	447a0000 	.word	0x447a0000
 8000c18:	200001d4 	.word	0x200001d4

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c5e:	f000 fd67 	bl	8001730 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b09e      	sub	sp, #120	; 0x78
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2254      	movs	r2, #84	; 0x54
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 f813 	bl	8004cbc <memset>
  if(huart->Instance==LPUART1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_UART_MspInit+0xa8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d136      	bne.n	8000d0e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fa7d 	bl	80021ac <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb8:	f7ff ffb0 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0xac>)
 8000cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <HAL_UART_MspInit+0xac>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_UART_MspInit+0xac>)
 8000cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_UART_MspInit+0xac>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_UART_MspInit+0xac>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_UART_MspInit+0xac>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cec:	230c      	movs	r3, #12
 8000cee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f000 faaf 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3778      	adds	r7, #120	; 0x78
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40008000 	.word	0x40008000
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d30:	d10c      	bne.n	8000d4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d4a:	e018      	b.n	8000d7e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_TIM_Base_MspInit+0x6c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d113      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2032      	movs	r0, #50	; 0x32
 8000d74:	f000 fa45 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d78:	2032      	movs	r0, #50	; 0x32
 8000d7a:	f000 fa5c 	bl	8001236 <HAL_NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40000c00 	.word	0x40000c00

08000d90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d128      	bne.n	8000e04 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_TIM_Encoder_MspInit+0x80>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <HAL_TIM_Encoder_MspInit+0x80>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_TIM_Encoder_MspInit+0x80>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_TIM_Encoder_MspInit+0x80>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_TIM_Encoder_MspInit+0x80>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_TIM_Encoder_MspInit+0x80>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	23c0      	movs	r3, #192	; 0xc0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000df2:	2302      	movs	r3, #2
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f000 fa34 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d11c      	bne.n	8000e70 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_TIM_MspPostInit+0x64>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_TIM_MspPostInit+0x64>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_MspPostInit+0x64>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 f9fe 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f8a2 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed8:	f000 fb62 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM5_IRQHandler+0x10>)
 8000ee6:	f001 ff27 	bl	8002d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000154 	.word	0x20000154

08000ef4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f1c:	f7ff ffea 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	; (8000f64 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f003 fec1 	bl	8004ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4a:	f7ff fae3 	bl	8000514 <main>

08000f4e <LoopForever>:

LoopForever:
    b LoopForever
 8000f4e:	e7fe      	b.n	8000f4e <LoopForever>
  ldr   r0, =_estack
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f5c:	08004d7c 	.word	0x08004d7c
  ldr r2, =_sbss
 8000f60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f64:	200001ec 	.word	0x200001ec

08000f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC1_2_IRQHandler>

08000f6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f939 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f80e 	bl	8000f9c <HAL_InitTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e001      	b.n	8000f90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f8c:	f7ff fe4c 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f90:	79fb      	ldrb	r3, [r7, #7]

}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_InitTick+0x68>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d022      	beq.n	8000ff6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_InitTick+0x6c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_InitTick+0x68>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f944 	bl	8001252 <HAL_SYSTICK_Config>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10f      	bne.n	8000ff0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	d809      	bhi.n	8000fea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	f000 f910 	bl	8001202 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_InitTick+0x70>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e007      	b.n	8000ffa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e004      	b.n	8000ffa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e001      	b.n	8000ffa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000008 	.word	0x20000008
 8001008:	20000000 	.word	0x20000000
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x1c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x20>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4413      	add	r3, r2
 800101e:	4a03      	ldr	r2, [pc, #12]	; (800102c <HAL_IncTick+0x1c>)
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	200001e8 	.word	0x200001e8
 8001030:	20000008 	.word	0x20000008

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200001e8 	.word	0x200001e8

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff29 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff40 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff33 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa4 	bl	80011a8 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800127a:	e15a      	b.n	8001532 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 814c 	beq.w	800152c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d005      	beq.n	80012ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 0201 	and.w	r2, r3, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b03      	cmp	r3, #3
 8001318:	d017      	beq.n	800134a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d123      	bne.n	800139e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	08da      	lsrs	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3208      	adds	r2, #8
 800135e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0203 	and.w	r2, r3, #3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80a6 	beq.w	800152c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <HAL_GPIO_Init+0x2e4>)
 80013e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e4:	4a5a      	ldr	r2, [pc, #360]	; (8001550 <HAL_GPIO_Init+0x2e4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6613      	str	r3, [r2, #96]	; 0x60
 80013ec:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_GPIO_Init+0x2e4>)
 80013ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f8:	4a56      	ldr	r2, [pc, #344]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001422:	d01f      	beq.n	8001464 <HAL_GPIO_Init+0x1f8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d019      	beq.n	8001460 <HAL_GPIO_Init+0x1f4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d013      	beq.n	800145c <HAL_GPIO_Init+0x1f0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_GPIO_Init+0x2f4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00d      	beq.n	8001458 <HAL_GPIO_Init+0x1ec>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a49      	ldr	r2, [pc, #292]	; (8001564 <HAL_GPIO_Init+0x2f8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0x1e8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a48      	ldr	r2, [pc, #288]	; (8001568 <HAL_GPIO_Init+0x2fc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d101      	bne.n	8001450 <HAL_GPIO_Init+0x1e4>
 800144c:	2305      	movs	r3, #5
 800144e:	e00a      	b.n	8001466 <HAL_GPIO_Init+0x1fa>
 8001450:	2306      	movs	r3, #6
 8001452:	e008      	b.n	8001466 <HAL_GPIO_Init+0x1fa>
 8001454:	2304      	movs	r3, #4
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1fa>
 8001458:	2303      	movs	r3, #3
 800145a:	e004      	b.n	8001466 <HAL_GPIO_Init+0x1fa>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x1fa>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_GPIO_Init+0x1fa>
 8001464:	2300      	movs	r3, #0
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001476:	4937      	ldr	r1, [pc, #220]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_GPIO_Init+0x300>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014a8:	4a30      	ldr	r2, [pc, #192]	; (800156c <HAL_GPIO_Init+0x300>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_GPIO_Init+0x300>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014d2:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_GPIO_Init+0x300>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_GPIO_Init+0x300>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_GPIO_Init+0x300>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_GPIO_Init+0x300>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_GPIO_Init+0x300>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	f47f ae9d 	bne.w	800127c <HAL_GPIO_Init+0x10>
  }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000
 8001558:	48000400 	.word	0x48000400
 800155c:	48000800 	.word	0x48000800
 8001560:	48000c00 	.word	0x48000c00
 8001564:	48001000 	.word	0x48001000
 8001568:	48001400 	.word	0x48001400
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800158c:	e002      	b.n	8001594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f806 	bl	80015d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d141      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f6:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001602:	d131      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001604:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161c:	4a41      	ldr	r2, [pc, #260]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2232      	movs	r2, #50	; 0x32
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a3f      	ldr	r2, [pc, #252]	; (800172c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163a:	e002      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b01      	subs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d102      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f2      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001662:	d158      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e057      	b.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001678:	e04d      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001680:	d141      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168e:	d131      	bne.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a8:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2232      	movs	r2, #50	; 0x32
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
 80016ba:	4a1c      	ldr	r2, [pc, #112]	; (800172c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	0c9b      	lsrs	r3, r3, #18
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c6:	e002      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016da:	d102      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f2      	bne.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ee:	d112      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e011      	b.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001704:	e007      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001714:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40007000 	.word	0x40007000
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173e:	6093      	str	r3, [r2, #8]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40007000 	.word	0x40007000

08001750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e2fe      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d075      	beq.n	800185a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176e:	4b97      	ldr	r3, [pc, #604]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001778:	4b94      	ldr	r3, [pc, #592]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x3e>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d002      	beq.n	8001794 <HAL_RCC_OscConfig+0x44>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b08      	cmp	r3, #8
 8001792:	d10b      	bne.n	80017ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	4b8d      	ldr	r3, [pc, #564]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d05b      	beq.n	8001858 <HAL_RCC_OscConfig+0x108>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d157      	bne.n	8001858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e2d9      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b4:	d106      	bne.n	80017c4 <HAL_RCC_OscConfig+0x74>
 80017b6:	4b85      	ldr	r3, [pc, #532]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a84      	ldr	r2, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e01d      	b.n	8001800 <HAL_RCC_OscConfig+0xb0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x98>
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7e      	ldr	r2, [pc, #504]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7b      	ldr	r2, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0xb0>
 80017e8:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a77      	ldr	r2, [pc, #476]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a74      	ldr	r2, [pc, #464]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80017fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d013      	beq.n	8001830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fc14 	bl	8001034 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc10 	bl	8001034 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e29e      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001822:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0xc0>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fc00 	bl	8001034 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fbfc 	bl	8001034 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e28a      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184a:	4b60      	ldr	r3, [pc, #384]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0xe8>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d075      	beq.n	8001952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001866:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001870:	4b56      	ldr	r3, [pc, #344]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b0c      	cmp	r3, #12
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x136>
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d002      	beq.n	800188c <HAL_RCC_OscConfig+0x13c>
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d11f      	bne.n	80018cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800188c:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x154>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e25d      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	4946      	ldr	r1, [pc, #280]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018b8:	4b45      	ldr	r3, [pc, #276]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb6d 	bl	8000f9c <HAL_InitTick>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d043      	beq.n	8001950 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e249      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d023      	beq.n	800191c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a3c      	ldr	r2, [pc, #240]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fba8 	bl	8001034 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fba4 	bl	8001034 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e232      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fa:	4b34      	ldr	r3, [pc, #208]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	061b      	lsls	r3, r3, #24
 8001914:	492d      	ldr	r1, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
 800191a:	e01a      	b.n	8001952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb84 	bl	8001034 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fb80 	bl	8001034 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e20e      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1e0>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d041      	beq.n	80019e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff fb5d 	bl	8001034 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fb59 	bl	8001034 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1e7      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0ef      	beq.n	800197e <HAL_RCC_OscConfig+0x22e>
 800199e:	e020      	b.n	80019e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff fb40 	bl	8001034 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b6:	e00d      	b.n	80019d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff fb3c 	bl	8001034 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d906      	bls.n	80019d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1ca      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d4:	4b8c      	ldr	r3, [pc, #560]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ea      	bne.n	80019b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80a6 	beq.w	8001b3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019f4:	4b84      	ldr	r3, [pc, #528]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2b4>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x2b6>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b7f      	ldr	r3, [pc, #508]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	4a7e      	ldr	r2, [pc, #504]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
 8001a16:	4b7c      	ldr	r3, [pc, #496]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a26:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <HAL_RCC_OscConfig+0x4bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x4bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a75      	ldr	r2, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4bc>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff faf9 	bl	8001034 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7ff faf5 	bl	8001034 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e183      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a58:	4b6c      	ldr	r3, [pc, #432]	; (8001c0c <HAL_RCC_OscConfig+0x4bc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_RCC_OscConfig+0x32e>
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7c:	e024      	b.n	8001ac8 <HAL_RCC_OscConfig+0x378>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d110      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x358>
 8001a86:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	4a5e      	ldr	r2, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a96:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9c:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa6:	e00f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x378>
 8001aa8:	4b57      	ldr	r3, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a56      	ldr	r2, [pc, #344]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d016      	beq.n	8001afe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fab0 	bl	8001034 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7ff faac 	bl	8001034 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e138      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ed      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x388>
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff fa99 	bl	8001034 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fa95 	bl	8001034 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e121      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ed      	bne.n	8001b06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b2a:	7ffb      	ldrb	r3, [r7, #31]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d03c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b56:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fa68 	bl	8001034 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b68:	f7ff fa64 	bl	8001034 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0f2      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ef      	beq.n	8001b68 <HAL_RCC_OscConfig+0x418>
 8001b88:	e01b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fa4b 	bl	8001034 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba2:	f7ff fa47 	bl	8001034 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0d5      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ef      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80c9 	beq.w	8001d5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	f000 8083 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d15e      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_RCC_OscConfig+0x4b8>)
 8001be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff fa21 	bl	8001034 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	e00c      	b.n	8001c10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fa1d 	bl	8001034 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d905      	bls.n	8001c10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0ab      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ec      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1c:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <HAL_RCC_OscConfig+0x61c>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6a11      	ldr	r1, [r2, #32]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c36:	0212      	lsls	r2, r2, #8
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c3e:	0852      	lsrs	r2, r2, #1
 8001c40:	3a01      	subs	r2, #1
 8001c42:	0552      	lsls	r2, r2, #21
 8001c44:	4311      	orrs	r1, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c4a:	0852      	lsrs	r2, r2, #1
 8001c4c:	3a01      	subs	r2, #1
 8001c4e:	0652      	lsls	r2, r2, #25
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c56:	06d2      	lsls	r2, r2, #27
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	4943      	ldr	r1, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a40      	ldr	r2, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f9dc 	bl	8001034 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f9d8 	bl	8001034 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e066      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x530>
 8001c9e:	e05e      	b.n	8001d5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a30      	ldr	r2, [pc, #192]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff f9c2 	bl	8001034 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f9be 	bl	8001034 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e04c      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4924      	ldr	r1, [pc, #144]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_RCC_OscConfig+0x620>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60cb      	str	r3, [r1, #12]
 8001cde:	e03e      	b.n	8001d5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e039      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_OscConfig+0x618>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d12c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d123      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11b      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d113      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	019f800c 	.word	0x019f800c
 8001d70:	feeefffc 	.word	0xfeeefffc

08001d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e11e      	b.n	8001fca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d910      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 020f 	bic.w	r2, r3, #15
 8001da2:	498c      	ldr	r1, [pc, #560]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b8a      	ldr	r3, [pc, #552]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e106      	b.n	8001fca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d073      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d129      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd0:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0f4      	b.n	8001fca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001de0:	f000 f99e 	bl	8002120 <RCC_GetSysClockFreqFromPLLSource>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4a7c      	ldr	r2, [pc, #496]	; (8001fdc <HAL_RCC_ClockConfig+0x268>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d93f      	bls.n	8001e6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dee:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d033      	beq.n	8001e6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d12f      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e16:	4a70      	ldr	r2, [pc, #448]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e024      	b.n	8001e6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d109      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0c6      	b.n	8001fca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3c:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0be      	b.n	8001fca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e4c:	f000 f8ce 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <HAL_RCC_ClockConfig+0x268>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d909      	bls.n	8001e6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e62:	4a5d      	ldr	r2, [pc, #372]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4957      	ldr	r1, [pc, #348]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e80:	f7ff f8d8 	bl	8001034 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff f8d4 	bl	8001034 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e095      	b.n	8001fca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d023      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a42      	ldr	r2, [pc, #264]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ee8:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4a32      	ldr	r2, [pc, #200]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001f10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d21d      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 020f 	bic.w	r2, r3, #15
 8001f2c:	4929      	ldr	r1, [pc, #164]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f34:	f7ff f87e 	bl	8001034 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7ff f87a 	bl	8001034 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e03b      	b.n	8001fca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_RCC_ClockConfig+0x260>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d1ed      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4917      	ldr	r1, [pc, #92]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	490f      	ldr	r1, [pc, #60]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f9e:	f000 f825 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <HAL_RCC_ClockConfig+0x26c>)
 8001fb0:	5ccb      	ldrb	r3, [r1, r3]
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x270>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_ClockConfig+0x274>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe ffea 	bl	8000f9c <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	04c4b400 	.word	0x04c4b400
 8001fe0:	08004d2c 	.word	0x08004d2c
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	e047      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d102      	bne.n	8002016 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	e03e      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d136      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3301      	adds	r3, #1
 8002038:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d10c      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002040:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800204a:	68d2      	ldr	r2, [r2, #12]
 800204c:	0a12      	lsrs	r2, r2, #8
 800204e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
      break;
 8002058:	e00c      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205a:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	0a12      	lsrs	r2, r2, #8
 8002068:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
      break;
 8002072:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0e5b      	lsrs	r3, r3, #25
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	e001      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002094:	693b      	ldr	r3, [r7, #16]
}
 8002096:	4618      	mov	r0, r3
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	016e3600 	.word	0x016e3600

080020b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020cc:	f7ff fff0 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08004d3c 	.word	0x08004d3c

080020f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020f8:	f7ff ffda 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	0adb      	lsrs	r3, r3, #11
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4904      	ldr	r1, [pc, #16]	; (800211c <HAL_RCC_GetPCLK2Freq+0x28>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	08004d3c 	.word	0x08004d3c

08002120 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d10c      	bne.n	800215e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800214e:	68d2      	ldr	r2, [r2, #12]
 8002150:	0a12      	lsrs	r2, r2, #8
 8002152:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
    break;
 800215c:	e00c      	b.n	8002178 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	0a12      	lsrs	r2, r2, #8
 800216c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    break;
 8002176:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0e5b      	lsrs	r3, r3, #25
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002192:	687b      	ldr	r3, [r7, #4]
}
 8002194:	4618      	mov	r0, r3
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	016e3600 	.word	0x016e3600
 80021a8:	00f42400 	.word	0x00f42400

080021ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021b4:	2300      	movs	r3, #0
 80021b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021b8:	2300      	movs	r3, #0
 80021ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8098 	beq.w	80022fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10d      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b40      	ldr	r3, [pc, #256]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a3f      	ldr	r2, [pc, #252]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f6:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a39      	ldr	r2, [pc, #228]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002202:	f7fe ff17 	bl	8001034 <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002208:	e009      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7fe ff13 	bl	8001034 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d902      	bls.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	74fb      	strb	r3, [r7, #19]
        break;
 800221c:	e005      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ef      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d159      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01e      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d019      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fed3 	bl	8001034 <HAL_GetTick>
 800228e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002290:	e00b      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fecf 	bl	8001034 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d902      	bls.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	74fb      	strb	r3, [r7, #19]
            break;
 80022a8:	e006      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ec      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	4903      	ldr	r1, [pc, #12]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022d4:	e008      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	74bb      	strb	r3, [r7, #18]
 80022da:	e005      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e8:	7c7b      	ldrb	r3, [r7, #17]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ee:	4ba7      	ldr	r3, [pc, #668]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	4aa6      	ldr	r2, [pc, #664]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002306:	4ba1      	ldr	r3, [pc, #644]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f023 0203 	bic.w	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	499d      	ldr	r1, [pc, #628]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002328:	4b98      	ldr	r3, [pc, #608]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 020c 	bic.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4995      	ldr	r1, [pc, #596]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800234a:	4b90      	ldr	r3, [pc, #576]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	498c      	ldr	r1, [pc, #560]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800236c:	4b87      	ldr	r3, [pc, #540]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	4984      	ldr	r1, [pc, #528]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800238e:	4b7f      	ldr	r3, [pc, #508]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	497b      	ldr	r1, [pc, #492]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023b0:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	4973      	ldr	r1, [pc, #460]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d2:	4b6e      	ldr	r3, [pc, #440]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	496a      	ldr	r1, [pc, #424]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023f4:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4962      	ldr	r1, [pc, #392]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	4959      	ldr	r1, [pc, #356]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002438:	4b54      	ldr	r3, [pc, #336]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	4951      	ldr	r1, [pc, #324]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800245a:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	4948      	ldr	r1, [pc, #288]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4940      	ldr	r1, [pc, #256]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800249a:	d105      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249c:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	4932      	ldr	r1, [pc, #200]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a2c      	ldr	r2, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	4924      	ldr	r1, [pc, #144]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250a:	d105      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002516:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	4916      	ldr	r1, [pc, #88]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002542:	d105      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a10      	ldr	r2, [pc, #64]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800254e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d019      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257a:	d109      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a02      	ldr	r2, [pc, #8]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002586:	60d3      	str	r3, [r2, #12]
 8002588:	e002      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d015      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4926      	ldr	r1, [pc, #152]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ba:	d105      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e2:	4918      	ldr	r1, [pc, #96]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800260e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002636:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002638:	7cbb      	ldrb	r3, [r7, #18]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e049      	b.n	80026ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fb56 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f000 fef8 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d001      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e054      	b.n	80027ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d022      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x80>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d01d      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x80>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_TIM_Base_Start_IT+0xd4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d018      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x80>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x80>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00e      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x80>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x80>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_TIM_Base_Start_IT+0xe4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x80>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d115      	bne.n	80027a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_TIM_Base_Start_IT+0xec>)
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d015      	beq.n	80027b6 <HAL_TIM_Base_Start_IT+0xbe>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d011      	beq.n	80027b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	e008      	b.n	80027b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e000      	b.n	80027b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00
 80027d8:	40013400 	.word	0x40013400
 80027dc:	40014000 	.word	0x40014000
 80027e0:	40015000 	.word	0x40015000
 80027e4:	00010007 	.word	0x00010007

080027e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e049      	b.n	800288e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f841 	bl	8002896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fe28 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_TIM_PWM_Start+0x24>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e03c      	b.n	800294a <HAL_TIM_PWM_Start+0x9e>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d109      	bne.n	80028ea <HAL_TIM_PWM_Start+0x3e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e02f      	b.n	800294a <HAL_TIM_PWM_Start+0x9e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d109      	bne.n	8002904 <HAL_TIM_PWM_Start+0x58>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e022      	b.n	800294a <HAL_TIM_PWM_Start+0x9e>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d109      	bne.n	800291e <HAL_TIM_PWM_Start+0x72>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e015      	b.n	800294a <HAL_TIM_PWM_Start+0x9e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b10      	cmp	r3, #16
 8002922:	d109      	bne.n	8002938 <HAL_TIM_PWM_Start+0x8c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e008      	b.n	800294a <HAL_TIM_PWM_Start+0x9e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0a6      	b.n	8002aa0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Start+0xb6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002960:	e023      	b.n	80029aa <HAL_TIM_PWM_Start+0xfe>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d104      	bne.n	8002972 <HAL_TIM_PWM_Start+0xc6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002970:	e01b      	b.n	80029aa <HAL_TIM_PWM_Start+0xfe>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d104      	bne.n	8002982 <HAL_TIM_PWM_Start+0xd6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002980:	e013      	b.n	80029aa <HAL_TIM_PWM_Start+0xfe>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PWM_Start+0xe6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002990:	e00b      	b.n	80029aa <HAL_TIM_PWM_Start+0xfe>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start+0xf6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a0:	e003      	b.n	80029aa <HAL_TIM_PWM_Start+0xfe>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2201      	movs	r2, #1
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 f9dc 	bl	8003d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_TIM_PWM_Start+0x1fc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x148>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a39      	ldr	r2, [pc, #228]	; (8002aac <HAL_TIM_PWM_Start+0x200>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x148>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <HAL_TIM_PWM_Start+0x204>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x148>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a36      	ldr	r2, [pc, #216]	; (8002ab4 <HAL_TIM_PWM_Start+0x208>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x148>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_TIM_PWM_Start+0x20c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x148>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_TIM_PWM_Start+0x210>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_PWM_Start+0x14c>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_TIM_PWM_Start+0x14e>
 80029f8:	2300      	movs	r3, #0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <HAL_TIM_PWM_Start+0x1fc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x1b2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d01d      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x1b2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <HAL_TIM_PWM_Start+0x214>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x1b2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_TIM_PWM_Start+0x218>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x1b2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <HAL_TIM_PWM_Start+0x21c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x1b2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_TIM_PWM_Start+0x200>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x1b2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_TIM_PWM_Start+0x204>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x1b2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_TIM_PWM_Start+0x210>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d115      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_TIM_PWM_Start+0x220>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d015      	beq.n	8002a9c <HAL_TIM_PWM_Start+0x1f0>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a76:	d011      	beq.n	8002a9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a88:	e008      	b.n	8002a9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e000      	b.n	8002a9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40013400 	.word	0x40013400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	40014800 	.word	0x40014800
 8002abc:	40015000 	.word	0x40015000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	00010007 	.word	0x00010007

08002ad0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e097      	b.n	8002c14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fe f949 	bl	8000d90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002b14:	f023 0307 	bic.w	r3, r3, #7
 8002b18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	f000 fca9 	bl	800347c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	4313      	orrs	r3, r2
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b70:	f023 030c 	bic.w	r3, r3, #12
 8002b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	011a      	lsls	r2, r3, #4
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	031b      	lsls	r3, r3, #12
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002bb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d110      	bne.n	8002c6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c52:	7b7b      	ldrb	r3, [r7, #13]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d001      	beq.n	8002c5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e069      	b.n	8002d30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6c:	e031      	b.n	8002cd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d110      	bne.n	8002c96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c7a:	7b3b      	ldrb	r3, [r7, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e055      	b.n	8002d30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c94:	e01d      	b.n	8002cd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d105      	bne.n	8002cae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ca2:	7b7b      	ldrb	r3, [r7, #13]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ca8:	7b3b      	ldrb	r3, [r7, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e03e      	b.n	8002d30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_TIM_Encoder_Start+0xc4>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d008      	beq.n	8002cf0 <HAL_TIM_Encoder_Start+0xd4>
 8002cde:	e00f      	b.n	8002d00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 f841 	bl	8003d70 <TIM_CCxChannelCmd>
      break;
 8002cee:	e016      	b.n	8002d1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 f839 	bl	8003d70 <TIM_CCxChannelCmd>
      break;
 8002cfe:	e00e      	b.n	8002d1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 f831 	bl	8003d70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2201      	movs	r2, #1
 8002d14:	2104      	movs	r1, #4
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f82a 	bl	8003d70 <TIM_CCxChannelCmd>
      break;
 8002d1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d020      	beq.n	8002d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0202 	mvn.w	r2, #2
 8002d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fb5c 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fb4e 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fb5f 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0204 	mvn.w	r2, #4
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fb36 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fb28 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fb39 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0208 	mvn.w	r2, #8
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fb10 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fb02 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fb13 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0210 	mvn.w	r2, #16
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2208      	movs	r2, #8
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 faea 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fadc 	bl	800342c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 faed 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0201 	mvn.w	r2, #1
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fe3a 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f001 f815 	bl	8003efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f001 f80d 	bl	8003f10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 faa7 	bl	8003468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f06f 0220 	mvn.w	r2, #32
 8002f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 ffd5 	bl	8003ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 ffe1 	bl	8003f24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 ffd9 	bl	8003f38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00c      	beq.n	8002faa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 ffd1 	bl	8003f4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00c      	beq.n	8002fce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 ffc9 	bl	8003f60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e0ff      	b.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b14      	cmp	r3, #20
 8003002:	f200 80f0 	bhi.w	80031e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	08003061 	.word	0x08003061
 8003010:	080031e7 	.word	0x080031e7
 8003014:	080031e7 	.word	0x080031e7
 8003018:	080031e7 	.word	0x080031e7
 800301c:	080030a1 	.word	0x080030a1
 8003020:	080031e7 	.word	0x080031e7
 8003024:	080031e7 	.word	0x080031e7
 8003028:	080031e7 	.word	0x080031e7
 800302c:	080030e3 	.word	0x080030e3
 8003030:	080031e7 	.word	0x080031e7
 8003034:	080031e7 	.word	0x080031e7
 8003038:	080031e7 	.word	0x080031e7
 800303c:	08003123 	.word	0x08003123
 8003040:	080031e7 	.word	0x080031e7
 8003044:	080031e7 	.word	0x080031e7
 8003048:	080031e7 	.word	0x080031e7
 800304c:	08003165 	.word	0x08003165
 8003050:	080031e7 	.word	0x080031e7
 8003054:	080031e7 	.word	0x080031e7
 8003058:	080031e7 	.word	0x080031e7
 800305c:	080031a5 	.word	0x080031a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fabc 	bl	80035e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0208 	orr.w	r2, r2, #8
 800307a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0204 	bic.w	r2, r2, #4
 800308a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6999      	ldr	r1, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	619a      	str	r2, [r3, #24]
      break;
 800309e:	e0a5      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fb36 	bl	8003718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6999      	ldr	r1, [r3, #24]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	021a      	lsls	r2, r3, #8
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	619a      	str	r2, [r3, #24]
      break;
 80030e0:	e084      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fba9 	bl	8003840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0208 	orr.w	r2, r2, #8
 80030fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0204 	bic.w	r2, r2, #4
 800310c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69d9      	ldr	r1, [r3, #28]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	61da      	str	r2, [r3, #28]
      break;
 8003120:	e064      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fc1b 	bl	8003964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69d9      	ldr	r1, [r3, #28]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	021a      	lsls	r2, r3, #8
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	61da      	str	r2, [r3, #28]
      break;
 8003162:	e043      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fc8e 	bl	8003a8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0204 	bic.w	r2, r2, #4
 800318e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031a2:	e023      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fcd8 	bl	8003b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	021a      	lsls	r2, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031e4:	e002      	b.n	80031ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop

08003200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_TIM_ConfigClockSource+0x1c>
 8003218:	2302      	movs	r3, #2
 800321a:	e0f6      	b.n	800340a <HAL_TIM_ConfigClockSource+0x20a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800323a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800323e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6f      	ldr	r2, [pc, #444]	; (8003414 <HAL_TIM_ConfigClockSource+0x214>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f000 80c1 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 800325c:	4a6d      	ldr	r2, [pc, #436]	; (8003414 <HAL_TIM_ConfigClockSource+0x214>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f200 80c6 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003264:	4a6c      	ldr	r2, [pc, #432]	; (8003418 <HAL_TIM_ConfigClockSource+0x218>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f000 80b9 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 800326c:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_TIM_ConfigClockSource+0x218>)
 800326e:	4293      	cmp	r3, r2
 8003270:	f200 80be 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003274:	4a69      	ldr	r2, [pc, #420]	; (800341c <HAL_TIM_ConfigClockSource+0x21c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	f000 80b1 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 800327c:	4a67      	ldr	r2, [pc, #412]	; (800341c <HAL_TIM_ConfigClockSource+0x21c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	f200 80b6 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003284:	4a66      	ldr	r2, [pc, #408]	; (8003420 <HAL_TIM_ConfigClockSource+0x220>)
 8003286:	4293      	cmp	r3, r2
 8003288:	f000 80a9 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 800328c:	4a64      	ldr	r2, [pc, #400]	; (8003420 <HAL_TIM_ConfigClockSource+0x220>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f200 80ae 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003294:	4a63      	ldr	r2, [pc, #396]	; (8003424 <HAL_TIM_ConfigClockSource+0x224>)
 8003296:	4293      	cmp	r3, r2
 8003298:	f000 80a1 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 800329c:	4a61      	ldr	r2, [pc, #388]	; (8003424 <HAL_TIM_ConfigClockSource+0x224>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	f200 80a6 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80032a4:	4a60      	ldr	r2, [pc, #384]	; (8003428 <HAL_TIM_ConfigClockSource+0x228>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f000 8099 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 80032ac:	4a5e      	ldr	r2, [pc, #376]	; (8003428 <HAL_TIM_ConfigClockSource+0x228>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f200 809e 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80032b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80032b8:	f000 8091 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 80032bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80032c0:	f200 8096 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80032c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c8:	f000 8089 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1de>
 80032cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d0:	f200 808e 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80032d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d8:	d03e      	beq.n	8003358 <HAL_TIM_ConfigClockSource+0x158>
 80032da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032de:	f200 8087 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	f000 8086 	beq.w	80033f6 <HAL_TIM_ConfigClockSource+0x1f6>
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d87f      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80032f0:	2b70      	cmp	r3, #112	; 0x70
 80032f2:	d01a      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x12a>
 80032f4:	2b70      	cmp	r3, #112	; 0x70
 80032f6:	d87b      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80032f8:	2b60      	cmp	r3, #96	; 0x60
 80032fa:	d050      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x19e>
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d877      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003300:	2b50      	cmp	r3, #80	; 0x50
 8003302:	d03c      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x17e>
 8003304:	2b50      	cmp	r3, #80	; 0x50
 8003306:	d873      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d058      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x1be>
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d86f      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003310:	2b30      	cmp	r3, #48	; 0x30
 8003312:	d064      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x1de>
 8003314:	2b30      	cmp	r3, #48	; 0x30
 8003316:	d86b      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003318:	2b20      	cmp	r3, #32
 800331a:	d060      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x1de>
 800331c:	2b20      	cmp	r3, #32
 800331e:	d867      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d05c      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x1de>
 8003324:	2b10      	cmp	r3, #16
 8003326:	d05a      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x1de>
 8003328:	e062      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800333a:	f000 fcf9 	bl	8003d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800334c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	609a      	str	r2, [r3, #8]
      break;
 8003356:	e04f      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003368:	f000 fce2 	bl	8003d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800337a:	609a      	str	r2, [r3, #8]
      break;
 800337c:	e03c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338a:	461a      	mov	r2, r3
 800338c:	f000 fc54 	bl	8003c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2150      	movs	r1, #80	; 0x50
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fcad 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 800339c:	e02c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 fc73 	bl	8003c96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2160      	movs	r1, #96	; 0x60
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fc9d 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80033bc:	e01c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 fc34 	bl	8003c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fc8d 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80033dc:	e00c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 fc84 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80033ee:	e003      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      break;
 80033f4:	e000      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80033f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	00100070 	.word	0x00100070
 8003418:	00100060 	.word	0x00100060
 800341c:	00100050 	.word	0x00100050
 8003420:	00100040 	.word	0x00100040
 8003424:	00100030 	.word	0x00100030
 8003428:	00100020 	.word	0x00100020

0800342c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a4c      	ldr	r2, [pc, #304]	; (80035c0 <TIM_Base_SetConfig+0x144>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d017      	beq.n	80034c4 <TIM_Base_SetConfig+0x48>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349a:	d013      	beq.n	80034c4 <TIM_Base_SetConfig+0x48>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a49      	ldr	r2, [pc, #292]	; (80035c4 <TIM_Base_SetConfig+0x148>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00f      	beq.n	80034c4 <TIM_Base_SetConfig+0x48>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a48      	ldr	r2, [pc, #288]	; (80035c8 <TIM_Base_SetConfig+0x14c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00b      	beq.n	80034c4 <TIM_Base_SetConfig+0x48>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a47      	ldr	r2, [pc, #284]	; (80035cc <TIM_Base_SetConfig+0x150>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d007      	beq.n	80034c4 <TIM_Base_SetConfig+0x48>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <TIM_Base_SetConfig+0x154>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0x48>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a45      	ldr	r2, [pc, #276]	; (80035d4 <TIM_Base_SetConfig+0x158>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a39      	ldr	r2, [pc, #228]	; (80035c0 <TIM_Base_SetConfig+0x144>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d023      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d01f      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a36      	ldr	r2, [pc, #216]	; (80035c4 <TIM_Base_SetConfig+0x148>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01b      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <TIM_Base_SetConfig+0x14c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d017      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a34      	ldr	r2, [pc, #208]	; (80035cc <TIM_Base_SetConfig+0x150>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a33      	ldr	r2, [pc, #204]	; (80035d0 <TIM_Base_SetConfig+0x154>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00f      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a33      	ldr	r2, [pc, #204]	; (80035d8 <TIM_Base_SetConfig+0x15c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00b      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a32      	ldr	r2, [pc, #200]	; (80035dc <TIM_Base_SetConfig+0x160>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <TIM_Base_SetConfig+0x164>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_Base_SetConfig+0xaa>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <TIM_Base_SetConfig+0x158>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d108      	bne.n	8003538 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <TIM_Base_SetConfig+0x144>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <TIM_Base_SetConfig+0x110>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <TIM_Base_SetConfig+0x154>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00f      	beq.n	800358c <TIM_Base_SetConfig+0x110>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <TIM_Base_SetConfig+0x15c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00b      	beq.n	800358c <TIM_Base_SetConfig+0x110>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a19      	ldr	r2, [pc, #100]	; (80035dc <TIM_Base_SetConfig+0x160>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <TIM_Base_SetConfig+0x110>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <TIM_Base_SetConfig+0x164>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0x110>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <TIM_Base_SetConfig+0x158>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d105      	bne.n	80035b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]
  }
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40013400 	.word	0x40013400
 80035d4:	40015000 	.word	0x40015000
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f023 0201 	bic.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0302 	bic.w	r3, r3, #2
 8003630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a30      	ldr	r2, [pc, #192]	; (8003700 <TIM_OC1_SetConfig+0x11c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d013      	beq.n	800366c <TIM_OC1_SetConfig+0x88>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <TIM_OC1_SetConfig+0x120>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00f      	beq.n	800366c <TIM_OC1_SetConfig+0x88>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <TIM_OC1_SetConfig+0x124>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00b      	beq.n	800366c <TIM_OC1_SetConfig+0x88>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <TIM_OC1_SetConfig+0x128>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_OC1_SetConfig+0x88>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a2c      	ldr	r2, [pc, #176]	; (8003710 <TIM_OC1_SetConfig+0x12c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC1_SetConfig+0x88>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <TIM_OC1_SetConfig+0x130>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10c      	bne.n	8003686 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0308 	bic.w	r3, r3, #8
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <TIM_OC1_SetConfig+0x11c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <TIM_OC1_SetConfig+0xd2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <TIM_OC1_SetConfig+0x120>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00f      	beq.n	80036b6 <TIM_OC1_SetConfig+0xd2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <TIM_OC1_SetConfig+0x124>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <TIM_OC1_SetConfig+0xd2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	; (800370c <TIM_OC1_SetConfig+0x128>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <TIM_OC1_SetConfig+0xd2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <TIM_OC1_SetConfig+0x12c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_OC1_SetConfig+0xd2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <TIM_OC1_SetConfig+0x130>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d111      	bne.n	80036da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40013400 	.word	0x40013400
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	40015000 	.word	0x40015000

08003718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 0210 	bic.w	r2, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0320 	bic.w	r3, r3, #32
 8003766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <TIM_OC2_SetConfig+0x110>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_OC2_SetConfig+0x74>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a2b      	ldr	r2, [pc, #172]	; (800382c <TIM_OC2_SetConfig+0x114>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_OC2_SetConfig+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <TIM_OC2_SetConfig+0x118>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10d      	bne.n	80037a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <TIM_OC2_SetConfig+0x110>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <TIM_OC2_SetConfig+0xc0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <TIM_OC2_SetConfig+0x114>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00f      	beq.n	80037d8 <TIM_OC2_SetConfig+0xc0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <TIM_OC2_SetConfig+0x11c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_OC2_SetConfig+0xc0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <TIM_OC2_SetConfig+0x120>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_OC2_SetConfig+0xc0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <TIM_OC2_SetConfig+0x124>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_OC2_SetConfig+0xc0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <TIM_OC2_SetConfig+0x118>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d113      	bne.n	8003800 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40013400 	.word	0x40013400
 8003830:	40015000 	.word	0x40015000
 8003834:	40014000 	.word	0x40014000
 8003838:	40014400 	.word	0x40014400
 800383c:	40014800 	.word	0x40014800

08003840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800388c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2b      	ldr	r2, [pc, #172]	; (800394c <TIM_OC3_SetConfig+0x10c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <TIM_OC3_SetConfig+0x72>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <TIM_OC3_SetConfig+0x110>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_OC3_SetConfig+0x72>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <TIM_OC3_SetConfig+0x114>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10d      	bne.n	80038ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <TIM_OC3_SetConfig+0x10c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <TIM_OC3_SetConfig+0xbe>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <TIM_OC3_SetConfig+0x110>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00f      	beq.n	80038fe <TIM_OC3_SetConfig+0xbe>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <TIM_OC3_SetConfig+0x118>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <TIM_OC3_SetConfig+0xbe>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <TIM_OC3_SetConfig+0x11c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <TIM_OC3_SetConfig+0xbe>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <TIM_OC3_SetConfig+0x120>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_OC3_SetConfig+0xbe>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a16      	ldr	r2, [pc, #88]	; (8003954 <TIM_OC3_SetConfig+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d113      	bne.n	8003926 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800390c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40013400 	.word	0x40013400
 8003954:	40015000 	.word	0x40015000
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	031b      	lsls	r3, r3, #12
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <TIM_OC4_SetConfig+0x110>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_OC4_SetConfig+0x74>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <TIM_OC4_SetConfig+0x114>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC4_SetConfig+0x74>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <TIM_OC4_SetConfig+0x118>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10d      	bne.n	80039f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <TIM_OC4_SetConfig+0x110>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <TIM_OC4_SetConfig+0xc0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <TIM_OC4_SetConfig+0x114>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_OC4_SetConfig+0xc0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <TIM_OC4_SetConfig+0x11c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_OC4_SetConfig+0xc0>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <TIM_OC4_SetConfig+0x120>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_OC4_SetConfig+0xc0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <TIM_OC4_SetConfig+0x124>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC4_SetConfig+0xc0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <TIM_OC4_SetConfig+0x118>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d113      	bne.n	8003a4c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40013400 	.word	0x40013400
 8003a7c:	40015000 	.word	0x40015000
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400
 8003a88:	40014800 	.word	0x40014800

08003a8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ad0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <TIM_OC5_SetConfig+0xbc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <TIM_OC5_SetConfig+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <TIM_OC5_SetConfig+0xc0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00f      	beq.n	8003b0e <TIM_OC5_SetConfig+0x82>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <TIM_OC5_SetConfig+0xc4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_OC5_SetConfig+0x82>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <TIM_OC5_SetConfig+0xc8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_OC5_SetConfig+0x82>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <TIM_OC5_SetConfig+0xcc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_OC5_SetConfig+0x82>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <TIM_OC5_SetConfig+0xd0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d109      	bne.n	8003b22 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	621a      	str	r2, [r3, #32]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40013400 	.word	0x40013400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800
 8003b5c:	40015000 	.word	0x40015000

08003b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	051b      	lsls	r3, r3, #20
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1a      	ldr	r2, [pc, #104]	; (8003c20 <TIM_OC6_SetConfig+0xc0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <TIM_OC6_SetConfig+0x84>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <TIM_OC6_SetConfig+0xc4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00f      	beq.n	8003be4 <TIM_OC6_SetConfig+0x84>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <TIM_OC6_SetConfig+0xc8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_OC6_SetConfig+0x84>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <TIM_OC6_SetConfig+0xcc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC6_SetConfig+0x84>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <TIM_OC6_SetConfig+0xd0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC6_SetConfig+0x84>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <TIM_OC6_SetConfig+0xd4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d109      	bne.n	8003bf8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800
 8003c34:	40015000 	.word	0x40015000

08003c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 030a 	bic.w	r3, r3, #10
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 0210 	bic.w	r2, r3, #16
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	031b      	lsls	r3, r3, #12
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2201      	movs	r2, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e074      	b.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a34      	ldr	r2, [pc, #208]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d108      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d01d      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d10c      	bne.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40015000 	.word	0x40015000
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40014000 	.word	0x40014000

08003ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e042      	b.n	800400c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fc fe69 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2224      	movs	r2, #36	; 0x24
 8003fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb24 	bl	800460c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f825 	bl	8004014 <UART_SetConfig>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01b      	b.n	800400c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fba3 	bl	8004750 <UART_CheckIdleState>
 800400a:	4603      	mov	r3, r0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b08c      	sub	sp, #48	; 0x30
 800401a:	af00      	add	r7, sp, #0
 800401c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	4313      	orrs	r3, r2
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4baa      	ldr	r3, [pc, #680]	; (80042ec <UART_SetConfig+0x2d8>)
 8004044:	4013      	ands	r3, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800404c:	430b      	orrs	r3, r1
 800404e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a9f      	ldr	r2, [pc, #636]	; (80042f0 <UART_SetConfig+0x2dc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800407c:	4313      	orrs	r3, r2
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800408a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004094:	430b      	orrs	r3, r1
 8004096:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	f023 010f 	bic.w	r1, r3, #15
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a90      	ldr	r2, [pc, #576]	; (80042f4 <UART_SetConfig+0x2e0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d125      	bne.n	8004104 <UART_SetConfig+0xf0>
 80040b8:	4b8f      	ldr	r3, [pc, #572]	; (80042f8 <UART_SetConfig+0x2e4>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d81a      	bhi.n	80040fc <UART_SetConfig+0xe8>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <UART_SetConfig+0xb8>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040ed 	.word	0x080040ed
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040f5 	.word	0x080040f5
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e2:	e116      	b.n	8004312 <UART_SetConfig+0x2fe>
 80040e4:	2302      	movs	r3, #2
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ea:	e112      	b.n	8004312 <UART_SetConfig+0x2fe>
 80040ec:	2304      	movs	r3, #4
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f2:	e10e      	b.n	8004312 <UART_SetConfig+0x2fe>
 80040f4:	2308      	movs	r3, #8
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fa:	e10a      	b.n	8004312 <UART_SetConfig+0x2fe>
 80040fc:	2310      	movs	r3, #16
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004102:	e106      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a7c      	ldr	r2, [pc, #496]	; (80042fc <UART_SetConfig+0x2e8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d138      	bne.n	8004180 <UART_SetConfig+0x16c>
 800410e:	4b7a      	ldr	r3, [pc, #488]	; (80042f8 <UART_SetConfig+0x2e4>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d82d      	bhi.n	8004178 <UART_SetConfig+0x164>
 800411c:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <UART_SetConfig+0x110>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004159 	.word	0x08004159
 8004128:	08004179 	.word	0x08004179
 800412c:	08004179 	.word	0x08004179
 8004130:	08004179 	.word	0x08004179
 8004134:	08004169 	.word	0x08004169
 8004138:	08004179 	.word	0x08004179
 800413c:	08004179 	.word	0x08004179
 8004140:	08004179 	.word	0x08004179
 8004144:	08004161 	.word	0x08004161
 8004148:	08004179 	.word	0x08004179
 800414c:	08004179 	.word	0x08004179
 8004150:	08004179 	.word	0x08004179
 8004154:	08004171 	.word	0x08004171
 8004158:	2300      	movs	r3, #0
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415e:	e0d8      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004160:	2302      	movs	r3, #2
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004166:	e0d4      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004168:	2304      	movs	r3, #4
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416e:	e0d0      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004170:	2308      	movs	r3, #8
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004176:	e0cc      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004178:	2310      	movs	r3, #16
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e0c8      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5e      	ldr	r2, [pc, #376]	; (8004300 <UART_SetConfig+0x2ec>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d125      	bne.n	80041d6 <UART_SetConfig+0x1c2>
 800418a:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <UART_SetConfig+0x2e4>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004194:	2b30      	cmp	r3, #48	; 0x30
 8004196:	d016      	beq.n	80041c6 <UART_SetConfig+0x1b2>
 8004198:	2b30      	cmp	r3, #48	; 0x30
 800419a:	d818      	bhi.n	80041ce <UART_SetConfig+0x1ba>
 800419c:	2b20      	cmp	r3, #32
 800419e:	d00a      	beq.n	80041b6 <UART_SetConfig+0x1a2>
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d814      	bhi.n	80041ce <UART_SetConfig+0x1ba>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <UART_SetConfig+0x19a>
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d008      	beq.n	80041be <UART_SetConfig+0x1aa>
 80041ac:	e00f      	b.n	80041ce <UART_SetConfig+0x1ba>
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b4:	e0ad      	b.n	8004312 <UART_SetConfig+0x2fe>
 80041b6:	2302      	movs	r3, #2
 80041b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041bc:	e0a9      	b.n	8004312 <UART_SetConfig+0x2fe>
 80041be:	2304      	movs	r3, #4
 80041c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c4:	e0a5      	b.n	8004312 <UART_SetConfig+0x2fe>
 80041c6:	2308      	movs	r3, #8
 80041c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041cc:	e0a1      	b.n	8004312 <UART_SetConfig+0x2fe>
 80041ce:	2310      	movs	r3, #16
 80041d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d4:	e09d      	b.n	8004312 <UART_SetConfig+0x2fe>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <UART_SetConfig+0x2f0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d125      	bne.n	800422c <UART_SetConfig+0x218>
 80041e0:	4b45      	ldr	r3, [pc, #276]	; (80042f8 <UART_SetConfig+0x2e4>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041ea:	2bc0      	cmp	r3, #192	; 0xc0
 80041ec:	d016      	beq.n	800421c <UART_SetConfig+0x208>
 80041ee:	2bc0      	cmp	r3, #192	; 0xc0
 80041f0:	d818      	bhi.n	8004224 <UART_SetConfig+0x210>
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d00a      	beq.n	800420c <UART_SetConfig+0x1f8>
 80041f6:	2b80      	cmp	r3, #128	; 0x80
 80041f8:	d814      	bhi.n	8004224 <UART_SetConfig+0x210>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <UART_SetConfig+0x1f0>
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d008      	beq.n	8004214 <UART_SetConfig+0x200>
 8004202:	e00f      	b.n	8004224 <UART_SetConfig+0x210>
 8004204:	2300      	movs	r3, #0
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800420a:	e082      	b.n	8004312 <UART_SetConfig+0x2fe>
 800420c:	2302      	movs	r3, #2
 800420e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004212:	e07e      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004214:	2304      	movs	r3, #4
 8004216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421a:	e07a      	b.n	8004312 <UART_SetConfig+0x2fe>
 800421c:	2308      	movs	r3, #8
 800421e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004222:	e076      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004224:	2310      	movs	r3, #16
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422a:	e072      	b.n	8004312 <UART_SetConfig+0x2fe>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a35      	ldr	r2, [pc, #212]	; (8004308 <UART_SetConfig+0x2f4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d12a      	bne.n	800428c <UART_SetConfig+0x278>
 8004236:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <UART_SetConfig+0x2e4>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004244:	d01a      	beq.n	800427c <UART_SetConfig+0x268>
 8004246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424a:	d81b      	bhi.n	8004284 <UART_SetConfig+0x270>
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d00c      	beq.n	800426c <UART_SetConfig+0x258>
 8004252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004256:	d815      	bhi.n	8004284 <UART_SetConfig+0x270>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <UART_SetConfig+0x250>
 800425c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004260:	d008      	beq.n	8004274 <UART_SetConfig+0x260>
 8004262:	e00f      	b.n	8004284 <UART_SetConfig+0x270>
 8004264:	2300      	movs	r3, #0
 8004266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426a:	e052      	b.n	8004312 <UART_SetConfig+0x2fe>
 800426c:	2302      	movs	r3, #2
 800426e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004272:	e04e      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004274:	2304      	movs	r3, #4
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427a:	e04a      	b.n	8004312 <UART_SetConfig+0x2fe>
 800427c:	2308      	movs	r3, #8
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004282:	e046      	b.n	8004312 <UART_SetConfig+0x2fe>
 8004284:	2310      	movs	r3, #16
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800428a:	e042      	b.n	8004312 <UART_SetConfig+0x2fe>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <UART_SetConfig+0x2dc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d13a      	bne.n	800430c <UART_SetConfig+0x2f8>
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <UART_SetConfig+0x2e4>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a4:	d01a      	beq.n	80042dc <UART_SetConfig+0x2c8>
 80042a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042aa:	d81b      	bhi.n	80042e4 <UART_SetConfig+0x2d0>
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b0:	d00c      	beq.n	80042cc <UART_SetConfig+0x2b8>
 80042b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b6:	d815      	bhi.n	80042e4 <UART_SetConfig+0x2d0>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <UART_SetConfig+0x2b0>
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d008      	beq.n	80042d4 <UART_SetConfig+0x2c0>
 80042c2:	e00f      	b.n	80042e4 <UART_SetConfig+0x2d0>
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ca:	e022      	b.n	8004312 <UART_SetConfig+0x2fe>
 80042cc:	2302      	movs	r3, #2
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d2:	e01e      	b.n	8004312 <UART_SetConfig+0x2fe>
 80042d4:	2304      	movs	r3, #4
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042da:	e01a      	b.n	8004312 <UART_SetConfig+0x2fe>
 80042dc:	2308      	movs	r3, #8
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042e2:	e016      	b.n	8004312 <UART_SetConfig+0x2fe>
 80042e4:	2310      	movs	r3, #16
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ea:	e012      	b.n	8004312 <UART_SetConfig+0x2fe>
 80042ec:	cfff69f3 	.word	0xcfff69f3
 80042f0:	40008000 	.word	0x40008000
 80042f4:	40013800 	.word	0x40013800
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40004400 	.word	0x40004400
 8004300:	40004800 	.word	0x40004800
 8004304:	40004c00 	.word	0x40004c00
 8004308:	40005000 	.word	0x40005000
 800430c:	2310      	movs	r3, #16
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4aae      	ldr	r2, [pc, #696]	; (80045d0 <UART_SetConfig+0x5bc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	f040 8097 	bne.w	800444c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800431e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004322:	2b08      	cmp	r3, #8
 8004324:	d823      	bhi.n	800436e <UART_SetConfig+0x35a>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x318>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	08004351 	.word	0x08004351
 8004330:	0800436f 	.word	0x0800436f
 8004334:	08004359 	.word	0x08004359
 8004338:	0800436f 	.word	0x0800436f
 800433c:	0800435f 	.word	0x0800435f
 8004340:	0800436f 	.word	0x0800436f
 8004344:	0800436f 	.word	0x0800436f
 8004348:	0800436f 	.word	0x0800436f
 800434c:	08004367 	.word	0x08004367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004350:	f7fd feba 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8004354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004356:	e010      	b.n	800437a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004358:	4b9e      	ldr	r3, [pc, #632]	; (80045d4 <UART_SetConfig+0x5c0>)
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800435c:	e00d      	b.n	800437a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435e:	f7fd fe45 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004364:	e009      	b.n	800437a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800436c:	e005      	b.n	800437a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8130 	beq.w	80045e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	4a94      	ldr	r2, [pc, #592]	; (80045d8 <UART_SetConfig+0x5c4>)
 8004388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800438c:	461a      	mov	r2, r3
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	fbb3 f3f2 	udiv	r3, r3, r2
 8004394:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d305      	bcc.n	80043b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d903      	bls.n	80043ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043b8:	e113      	b.n	80045e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	2200      	movs	r2, #0
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	60fa      	str	r2, [r7, #12]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	4a84      	ldr	r2, [pc, #528]	; (80045d8 <UART_SetConfig+0x5c4>)
 80043c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2200      	movs	r2, #0
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043dc:	f7fb ff1c 	bl	8000218 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	020b      	lsls	r3, r1, #8
 80043f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043f6:	0202      	lsls	r2, r0, #8
 80043f8:	6979      	ldr	r1, [r7, #20]
 80043fa:	6849      	ldr	r1, [r1, #4]
 80043fc:	0849      	lsrs	r1, r1, #1
 80043fe:	2000      	movs	r0, #0
 8004400:	460c      	mov	r4, r1
 8004402:	4605      	mov	r5, r0
 8004404:	eb12 0804 	adds.w	r8, r2, r4
 8004408:	eb43 0905 	adc.w	r9, r3, r5
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	469a      	mov	sl, r3
 8004414:	4693      	mov	fp, r2
 8004416:	4652      	mov	r2, sl
 8004418:	465b      	mov	r3, fp
 800441a:	4640      	mov	r0, r8
 800441c:	4649      	mov	r1, r9
 800441e:	f7fb fefb 	bl	8000218 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4613      	mov	r3, r2
 8004428:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004430:	d308      	bcc.n	8004444 <UART_SetConfig+0x430>
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004438:	d204      	bcs.n	8004444 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a3a      	ldr	r2, [r7, #32]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	e0ce      	b.n	80045e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800444a:	e0ca      	b.n	80045e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004454:	d166      	bne.n	8004524 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800445a:	2b08      	cmp	r3, #8
 800445c:	d827      	bhi.n	80044ae <UART_SetConfig+0x49a>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x450>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	08004489 	.word	0x08004489
 8004468:	08004491 	.word	0x08004491
 800446c:	08004499 	.word	0x08004499
 8004470:	080044af 	.word	0x080044af
 8004474:	0800449f 	.word	0x0800449f
 8004478:	080044af 	.word	0x080044af
 800447c:	080044af 	.word	0x080044af
 8004480:	080044af 	.word	0x080044af
 8004484:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7fd fe1e 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 800448c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800448e:	e014      	b.n	80044ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7fd fe30 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8004494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004496:	e010      	b.n	80044ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004498:	4b4e      	ldr	r3, [pc, #312]	; (80045d4 <UART_SetConfig+0x5c0>)
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800449c:	e00d      	b.n	80044ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449e:	f7fd fda5 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 80044a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044a4:	e009      	b.n	80044ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044ac:	e005      	b.n	80044ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8090 	beq.w	80045e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	4a44      	ldr	r2, [pc, #272]	; (80045d8 <UART_SetConfig+0x5c4>)
 80044c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	441a      	add	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d916      	bls.n	800451c <UART_SetConfig+0x508>
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d212      	bcs.n	800451c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f023 030f 	bic.w	r3, r3, #15
 80044fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b29a      	uxth	r2, r3
 800450c:	8bfb      	ldrh	r3, [r7, #30]
 800450e:	4313      	orrs	r3, r2
 8004510:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	8bfa      	ldrh	r2, [r7, #30]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	e062      	b.n	80045e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004522:	e05e      	b.n	80045e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004528:	2b08      	cmp	r3, #8
 800452a:	d828      	bhi.n	800457e <UART_SetConfig+0x56a>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x520>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004559 	.word	0x08004559
 8004538:	08004561 	.word	0x08004561
 800453c:	08004569 	.word	0x08004569
 8004540:	0800457f 	.word	0x0800457f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fd fdb6 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800455e:	e014      	b.n	800458a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fd fdc8 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8004564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004566:	e010      	b.n	800458a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <UART_SetConfig+0x5c0>)
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800456c:	e00d      	b.n	800458a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fd fd3d 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004574:	e009      	b.n	800458a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800457c:	e005      	b.n	800458a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004588:	bf00      	nop
    }

    if (pclk != 0U)
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d028      	beq.n	80045e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <UART_SetConfig+0x5c4>)
 8004596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459a:	461a      	mov	r2, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	fbb3 f2f2 	udiv	r2, r3, r2
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	441a      	add	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d910      	bls.n	80045dc <UART_SetConfig+0x5c8>
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d20c      	bcs.n	80045dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
 80045cc:	e009      	b.n	80045e2 <UART_SetConfig+0x5ce>
 80045ce:	bf00      	nop
 80045d0:	40008000 	.word	0x40008000
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	08004d44 	.word	0x08004d44
      }
      else
      {
        ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2200      	movs	r2, #0
 80045f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80045fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004602:	4618      	mov	r0, r3
 8004604:	3730      	adds	r7, #48	; 0x30
 8004606:	46bd      	mov	sp, r7
 8004608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800460c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470a:	d10a      	bne.n	8004722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b098      	sub	sp, #96	; 0x60
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004760:	f7fc fc68 	bl	8001034 <HAL_GetTick>
 8004764:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d12f      	bne.n	80047d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f88e 	bl	80048a4 <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d022      	beq.n	80047d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a2:	653b      	str	r3, [r7, #80]	; 0x50
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
 80047ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e6      	bne.n	800478e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e063      	b.n	800489c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d149      	bne.n	8004876 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ea:	2200      	movs	r2, #0
 80047ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f857 	bl	80048a4 <UART_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d03c      	beq.n	8004876 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	623b      	str	r3, [r7, #32]
   return(result);
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481a:	633b      	str	r3, [r7, #48]	; 0x30
 800481c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e6      	bne.n	80047fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	60fb      	str	r3, [r7, #12]
   return(result);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	64bb      	str	r3, [r7, #72]	; 0x48
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800484e:	61fa      	str	r2, [r7, #28]
 8004850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	617b      	str	r3, [r7, #20]
   return(result);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e5      	bne.n	800482e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e012      	b.n	800489c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3758      	adds	r7, #88	; 0x58
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b4:	e04f      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d04b      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fc fbb9 	bl	8001034 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e04e      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d037      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d034      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d031      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d110      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f838 	bl	800497e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2208      	movs	r2, #8
 8004912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e029      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004930:	d111      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800493a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f81e 	bl	800497e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e00f      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	429a      	cmp	r2, r3
 8004972:	d0a0      	beq.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800497e:	b480      	push	{r7}
 8004980:	b095      	sub	sp, #84	; 0x54
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	643b      	str	r3, [r7, #64]	; 0x40
 80049a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e6      	bne.n	8004986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e3      	bne.n	80049b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d118      	bne.n	8004a2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f023 0310 	bic.w	r3, r3, #16
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6979      	ldr	r1, [r7, #20]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	613b      	str	r3, [r7, #16]
   return(result);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e6      	bne.n	80049f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004a3e:	bf00      	nop
 8004a40:	3754      	adds	r7, #84	; 0x54
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e027      	b.n	8004ab0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2224      	movs	r2, #36	; 0x24
 8004a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e02d      	b.n	8004b30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2224      	movs	r2, #36	; 0x24
 8004ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f84f 	bl	8004bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e02d      	b.n	8004bac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f811 	bl	8004bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bd4:	e031      	b.n	8004c3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bda:	2308      	movs	r3, #8
 8004bdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	0e5b      	lsrs	r3, r3, #25
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	0f5b      	lsrs	r3, r3, #29
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bfe:	7bbb      	ldrb	r3, [r7, #14]
 8004c00:	7b3a      	ldrb	r2, [r7, #12]
 8004c02:	4911      	ldr	r1, [pc, #68]	; (8004c48 <UARTEx_SetNbDataToProcess+0x94>)
 8004c04:	5c8a      	ldrb	r2, [r1, r2]
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c0a:	7b3a      	ldrb	r2, [r7, #12]
 8004c0c:	490f      	ldr	r1, [pc, #60]	; (8004c4c <UARTEx_SetNbDataToProcess+0x98>)
 8004c0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	7b7a      	ldrb	r2, [r7, #13]
 8004c20:	4909      	ldr	r1, [pc, #36]	; (8004c48 <UARTEx_SetNbDataToProcess+0x94>)
 8004c22:	5c8a      	ldrb	r2, [r1, r2]
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c28:	7b7a      	ldrb	r2, [r7, #13]
 8004c2a:	4908      	ldr	r1, [pc, #32]	; (8004c4c <UARTEx_SetNbDataToProcess+0x98>)
 8004c2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	08004d5c 	.word	0x08004d5c
 8004c4c:	08004d64 	.word	0x08004d64

08004c50 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	ed93 7a06 	vldr	s14, [r3, #24]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c80:	eeb1 7a67 	vneg.f32	s14, s15
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d006      	beq.n	8004cb4 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	220c      	movs	r2, #12
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f804 	bl	8004cbc <memset>
  }

}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <memset>:
 8004cbc:	4402      	add	r2, r0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <__libc_init_array>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4d0d      	ldr	r5, [pc, #52]	; (8004d04 <__libc_init_array+0x38>)
 8004cd0:	4c0d      	ldr	r4, [pc, #52]	; (8004d08 <__libc_init_array+0x3c>)
 8004cd2:	1b64      	subs	r4, r4, r5
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	42a6      	cmp	r6, r4
 8004cda:	d109      	bne.n	8004cf0 <__libc_init_array+0x24>
 8004cdc:	4d0b      	ldr	r5, [pc, #44]	; (8004d0c <__libc_init_array+0x40>)
 8004cde:	4c0c      	ldr	r4, [pc, #48]	; (8004d10 <__libc_init_array+0x44>)
 8004ce0:	f000 f818 	bl	8004d14 <_init>
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	2600      	movs	r6, #0
 8004cea:	42a6      	cmp	r6, r4
 8004cec:	d105      	bne.n	8004cfa <__libc_init_array+0x2e>
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf4:	4798      	blx	r3
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7ee      	b.n	8004cd8 <__libc_init_array+0xc>
 8004cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfe:	4798      	blx	r3
 8004d00:	3601      	adds	r6, #1
 8004d02:	e7f2      	b.n	8004cea <__libc_init_array+0x1e>
 8004d04:	08004d74 	.word	0x08004d74
 8004d08:	08004d74 	.word	0x08004d74
 8004d0c:	08004d74 	.word	0x08004d74
 8004d10:	08004d78 	.word	0x08004d78

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr
